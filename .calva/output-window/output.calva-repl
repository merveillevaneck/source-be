; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62289 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:9:1).
; Unable to resolve symbol: -main in this context
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval11780 (REPL:9).
; Wrong number of args (0) passed to: modulr.source/-main
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval11782 (REPL:9).
; Wrong number of args (1) passed to: modulr.source/-main
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; Hello, Source!
nil
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62358 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Syntax error macroexpanding clojure.core/ns at (src/modulr/source.clj:1:1).
; ((:require [http-kit/http-kit :as http])) - failed: Extra input spec: :clojure.core.specs.alpha/ns-form
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:9:46).
; No such var: http/response
clj꞉modulr.source꞉> 
; Execution error (IllegalStateException) at modulr.source/eval12125 (REPL:11).
; Attempting to call unbound fn: #'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62781 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:16:3).
; Unable to resolve symbol: *server in this context
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:16:3).
; Unable to resolve symbol: *server in this context
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; Starting server on port 8080
; Execution error (BindException) at sun.nio.ch.Net/bind0 (Net.java:-2).
; Address already in use
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; TypeError: Cannot read properties of undefined (reading 'label')
; Aborting connect.
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62959 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; this is where the db goes
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:63371 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6119f123]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6119f123]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:63536 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/home
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/home
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
