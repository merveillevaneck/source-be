; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62289 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:9:1).
; Unable to resolve symbol: -main in this context
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval11780 (REPL:9).
; Wrong number of args (0) passed to: modulr.source/-main
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval11782 (REPL:9).
; Wrong number of args (1) passed to: modulr.source/-main
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; Hello, Source!
nil
clj꞉modulr.source꞉> 
#'modulr.source/-main
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62358 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Syntax error macroexpanding clojure.core/ns at (src/modulr/source.clj:1:1).
; ((:require [http-kit/http-kit :as http])) - failed: Extra input spec: :clojure.core.specs.alpha/ns-form
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:9:46).
; No such var: http/response
clj꞉modulr.source꞉> 
; Execution error (IllegalStateException) at modulr.source/eval12125 (REPL:11).
; Attempting to call unbound fn: #'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x3c396205]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x3c396205]
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62781 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:16:3).
; Unable to resolve symbol: *server in this context
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:16:3).
; Unable to resolve symbol: *server in this context
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; Starting server on port 8080
; Execution error (BindException) at sun.nio.ch.Net/bind0 (Net.java:-2).
; Address already in use
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x6e0088d6]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; TypeError: Cannot read properties of undefined (reading 'label')
; Aborting connect.
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:62959 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; this is where the db goes
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:63371 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6119f123]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x6119f123]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:63536 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/home
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/*server
clj꞉modulr.source꞉> 
#'modulr.source/home
clj꞉modulr.source꞉> 
#'modulr.source/app
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
#'modulr.source/stop-server
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
#'modulr.source/start-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; #atom[nil 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #atom[#function[clojure.lang.AFunction/1] 0x33ec03b2]
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:61515 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#function[modulr.source/wrap-json/fn--15095]
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
#function[modulr.source/wrap-json/fn--15115]
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/wrap-json (REPL:17).
; Wrong number of args (0) passed to: modulr.source/wrap-json/fn--15123
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
; Request method: 
#function[modulr.source/wrap-json/fn--15372]
clj꞉modulr.source꞉> 
; Request method: 
#function[modulr.source/wrap-json/fn--15372]
clj꞉modulr.source꞉> 
; Request method: 
#'modulr.source/test-result
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval15386 (REPL:37).
; Wrong number of args (0) passed to: modulr.source/wrap-json/fn--15372
clj꞉modulr.source꞉> 
; Request method: 
#function[modulr.source/wrap-json/fn--15372]
clj꞉modulr.source꞉> 
; Request method: 
#'modulr.source/test-result
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval15394 (REPL:37).
; Wrong number of args (0) passed to: modulr.source/wrap-json/fn--15372
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:32:41).
; Unable to resolve symbol: decode-body in this context
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:32:41).
; Unable to resolve symbol: decode-body in this context
clj꞉modulr.source꞉> 
#'modulr.source/decode-body
clj꞉modulr.source꞉> 
#'modulr.source/encode-body
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
#'modulr.source/test-result
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval15405 (REPL:37).
; Wrong number of args (0) passed to: modulr.source/wrap-json/fn--15400
clj꞉modulr.source꞉> 
{:status 200, :body "\"{\\\"value\\\":\\\"Hello, Source!\\\"}\"", :headers {"Content-Type" "application/json"}}
clj꞉modulr.source꞉> 
#'modulr.source/decode-body
clj꞉modulr.source꞉> 
#'modulr.source/encode-body
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
#'modulr.source/test-result
clj꞉modulr.source꞉> 
; Syntax error reading source at (REPL:38:67).
; Map literal must contain an even number of forms
clj꞉modulr.source꞉> 
; Execution error (UnsupportedOperationException) at modulr.source/wrap-json$fn (REPL:31).
; nth not supported on this type: PersistentArrayMap
clj꞉modulr.source꞉> 
#'modulr.source/test-result
clj꞉modulr.source꞉> 
; Execution error (UnsupportedOperationException) at modulr.source/wrap-json$fn (REPL:31).
; nth not supported on this type: PersistentArrayMap
clj꞉modulr.source꞉> 
#'modulr.source/decode-body
clj꞉modulr.source꞉> 
{:status 200, :body {:value "Hello, Source!"}, :headers {"Content-Type" "application/json"}}
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/eval15432 (REPL:37).
; Wrong number of args (1) passed to: modulr.source/encode-body
clj꞉modulr.source꞉> 
#'modulr.source/encode-body
clj꞉modulr.source꞉> 
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {:content-type "application/json"}}
clj꞉modulr.source꞉> 
{:status 200, :body {:value "Hello, Source!"}, :headers {"Content-Type" "application/json"}}
clj꞉modulr.source꞉> 
; {:status 200, :body {:value Hello, Source!}, :headers {:content-type application/json}}
; {:status 200, :body {"value":"Hello, Source!"}, :headers {:content-type application/json}}
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {:content-type "application/json"}}
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:45:1).
; Unable to resolve symbol: home in this context
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.source/test-wrapper
clj꞉modulr.source꞉> 
; Execution error (ArityException) at modulr.source/wrap-json$fn (REPL:32).
; Wrong number of args (2) passed to: modulr.source/decode-body
clj꞉modulr.source꞉> 
#'modulr.source/decode-body-json
clj꞉modulr.source꞉> 
#'modulr.source/encode-body-json
clj꞉modulr.source꞉> 
#'modulr.source/wrap-json
clj꞉modulr.source꞉> 
#'modulr.source/test-wrapper
clj꞉modulr.source꞉> 
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {"Content-Type" "application/json"}}
clj꞉modulr.source꞉> 
nil
clj꞉modulr.server꞉> 
#'modulr.server/decode-body-json
clj꞉modulr.server꞉> 
#'modulr.server/encode-body-json
clj꞉modulr.server꞉> 
#'modulr.server/wrap-json
clj꞉modulr.server꞉> 
#'modulr.source/test-wrapper
clj꞉modulr.source꞉> 
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {"Content-Type" "application/json"}}
clj꞉modulr.source꞉> 
#'modulr.routes/home
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/routes.clj:9:3).
; No such namespace: route
clj꞉modulr.routes꞉> 
#'modulr.server/*server
clj꞉modulr.server꞉> 
#'modulr.server/running?
clj꞉modulr.server꞉> 
false
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:38:19).
; No such namespace: http
clj꞉modulr.server꞉> 
#'modulr.server/*server
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:38:19).
; No such namespace: http
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:41:24).
; No such namespace: cookies
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:42:24).
; Unable to resolve symbol: app in this context
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:43:24).
; No such namespace: routes
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
#'modulr.server/stop-server
clj꞉modulr.server꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.server꞉> 
true
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
false
clj꞉modulr.server꞉> 
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/encode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; Execution error (IllegalStateException) at modulr.server/eval15625$loading (REPL:1).
; Alias json already exists in namespace modulr.server, aliasing jsonista.core
clj꞉modulr.server꞉> 
nil
clj꞉modulr.util꞉> 
; Execution error (IllegalStateException) at modulr.server/eval15657$loading (REPL:1).
; Alias json already exists in namespace modulr.server, aliasing jsonista.core
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:28:5).
; No such namespace: server
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:28:5).
; No such namespace: server
clj꞉modulr.server꞉> 
#'modulr.server/test-wrapper
clj꞉modulr.server꞉> 
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {"Content-Type" "application/json"}}
clj꞉modulr.server꞉> 
; Syntax error compiling at (src/modulr/server.clj:0:0).
; Can't take value of a macro: #'clojure.core/comment
clj꞉modulr.server꞉> 
#'modulr.server/test-wrapper
clj꞉modulr.server꞉> 
{:status 200, :body "{\"value\":\"Hello, Source!\"}", :headers {"Content-Type" "application/json"}}
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; Starting server on port 8080
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:64366 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:64884 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.routes/home
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.routes/home
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Execution error (FileNotFoundException) at modulr.db/eval15200$loading (REPL:1).
; Could not locate next/jdbc__init.class, next/jdbc.clj or next/jdbc.cljc on classpath.
clj꞉modulr.db꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; No nrepl port file found.
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; No nrepl port file found.
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:52744 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.users꞉> 
nil
clj꞉modulr.db꞉> 
#'modulr.db/scaffold-query
clj꞉modulr.db꞉> 
#'modulr.db/db-config
clj꞉modulr.db꞉> 
#'modulr.db/get-db
clj꞉modulr.db꞉> 
#object[next.jdbc.connection$url_PLUS_etc$reify__12342 0x10022cdb "jdbc:sqlite:source-users"]
clj꞉modulr.db꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.db꞉> 
nil
clj꞉modulr.users꞉> 
nil
clj꞉modulr.routes꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#function[compojure.core/wrap-route-matches/fn--15898]
clj꞉modulr.routes꞉> 
#function[compojure.core/wrap-route-matches/fn--15898]
clj꞉modulr.routes꞉> 
#function[compojure.core/wrap-route-matches/fn--15898]
clj꞉modulr.routes꞉> 
(compojure.core/make-route
 :post
 {:source "/signup", :re #"/signup", :keys [], :absolute? false}
 (clojure.core/fn [request__15910__auto__] (compojure.core/let-request [[] request__15910__auto__] {:status 200})))
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/routes.clj:13:1).
; Unable to resolve symbol: home in this context
clj꞉modulr.routes꞉> 
#'modulr.routes/home
clj꞉modulr.routes꞉> 
; Execution error (ArityException) at modulr.routes/eval16329 (REPL:13).
; Wrong number of args (0) passed to: compojure.core/wrap-route-matches/fn--15898
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.routes꞉> 
compojure.core$wrap_route_matches$fn__15898
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/source.clj:1:1).
; namespace 'modulr.server' not found
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:4:1).
; No such var: server/start-server
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Syntax error compiling at (src/modulr/source.clj:4:1).
; No such var: server/start-server
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:53536 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
true
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; nil
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:53566 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; nil
; nil
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:cookies {test-session {:value test}}, :remote-addr 0:0:0:0:0:0:0:1, :start-time 114852273235541, :params {}, :route-params {}, :headers {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 82719209-bebf-48d3-8457-c679f500909a}, :async-channel #object[org.httpkit.server.AsyncChannel 0x32d4149f /0:0:0:0:0:0:0:1:3000<->/0:0:0:0:0:0:0:1:53591], :server-port 3000, :content-length 56, :compojure/route [:post /login], :websocket? false, :content-type application/json, :character-encoding utf8, :uri /login, :server-name localhost, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x36eb861d BytesInputStream[len=56]], :scheme :http, :request-method :post}
; {:cookies {test-session {:value test}}, :remote-addr 0:0:0:0:0:0:0:1, :start-time 114880536330708, :params {}, :route-params {}, :headers {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token af3f419a-5ae5-4278-9fd5-d8d8267bb702}, :async-channel #object[org.httpkit.server.AsyncChannel 0x6bd59bd8 /0:0:0:0:0:0:0:1:3000<->/0:0:0:0:0:0:0:1:53591], :server-port 3000, :content-length 56, :compojure/route [:post /login], :websocket? false, :content-type application/json, :character-encoding utf8, :uri /login, :server-name localhost, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x651268d2 BytesInputStream[len=56]], :scheme :http, :request-method :post}
nil
clj꞉modulr.routes꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:cookies {test-session {:value test}}, :remote-addr 0:0:0:0:0:0:0:1, :start-time 114979129204375, :params {}, :route-params {}, :headers {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 218f6b02-d810-41e8-aa9d-70e5977b02e2}, :async-channel #object[org.httpkit.server.AsyncChannel 0x79350e6d /0:0:0:0:0:0:0:1:3000<->/0:0:0:0:0:0:0:1:53646], :server-port 3000, :content-length 56, :compojure/route [:post /login], :websocket? false, :content-type application/json, :character-encoding utf8, :uri /login, :server-name localhost, :query-string nil, :body #object[org.httpkit.BytesInputStream 0x77f2ff3b BytesInputStream[len=56]], :scheme :http, :request-method :post}
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #object[org.httpkit.BytesInputStream 0x588e2b7c BytesInputStream[len=56]]
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:53686 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #object[org.httpkit.BytesInputStream 0x208d5020 BytesInputStream[len=56]]
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; #object[org.httpkit.BytesInputStream 0x4eef7b18 BytesInputStream[len=56]]
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:53728 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {
;     "username": "merve",
;     "password": "something"
; }
; Fri Feb 28 15:52:44 SAST 2025 [http-kit-server-worker-2] ERROR - GET /
; java.lang.IllegalArgumentException: Cannot open <nil> as a Reader.
; 	at clojure.java.io$fn__11679.invokeStatic(io.clj:291)
; 	at clojure.java.io$fn__11679.invoke(io.clj:291)
; 	at clojure.java.io$fn__11568$G__11557__11575.invoke(io.clj:72)
; 	at clojure.java.io$reader.invokeStatic(io.clj:105)
; 	at clojure.java.io$reader.doInvoke(io.clj:89)
; 	at clojure.lang.RestFn.invoke(RestFn.java:413)
; 	at clojure.lang.AFn.applyToHelper(AFn.java:154)
; 	at clojure.lang.RestFn.applyTo(RestFn.java:135)
; 	at clojure.core$apply.invokeStatic(core.clj:669)
; 	at clojure.core$slurp.invokeStatic(core.clj:7089)
; 	at clojure.core$slurp.doInvoke(core.clj:7089)
; 	at clojure.lang.RestFn.invoke(RestFn.java:413)
; 	at modulr.util$wrap_json$fn__9817.invoke(util.clj:29)
; 	at org.httpkit.server$wrap_ring_websocket$ring_handler_STAR___10437.invoke(server.clj:437)
; 	at org.httpkit.server.HttpHandler.runSync(RingHandler.java:144)
; 	at org.httpkit.server.HttpHandler.run(RingHandler.java:138)
; 	at {"password":"something","username":"merve"}
nil
clj꞉modulr.source꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {
;     "username": "merve",
;     "password": "something"
; }
; Syntax error compiling at (src/modulr/users.clj:18:1).
; Unable to resolve symbol: get-users in this context
clj꞉modulr.users꞉> 
nil
clj꞉modulr.users꞉> 
#'modulr.users/save-user
clj꞉modulr.users꞉> 
#'modulr.users/get-users
clj꞉modulr.users꞉> 
; Execution error (ClassCastException) at modulr.users/get-users$fn (REPL:15).
; class java.lang.Integer cannot be cast to class clojure.lang.Named (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.Named is in unnamed module of loader 'app')
clj꞉modulr.users꞉> 
; Execution error (ClassCastException) at modulr.users/get-users$fn (REPL:15).
; class java.lang.Integer cannot be cast to class clojure.lang.Named (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.Named is in unnamed module of loader 'app')
clj꞉modulr.users꞉> 
#'modulr.users/get-users
clj꞉modulr.users꞉> 
; Execution error (ClassCastException) at modulr.users/get-users$fn (REPL:15).
; class java.lang.Integer cannot be cast to class clojure.lang.Named (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.Named is in unnamed module of loader 'app')
clj꞉modulr.users꞉> 
[#:users{:id 1, :username nil, :password nil}]
clj꞉modulr.users꞉> 
; Execution error (ClassCastException) at modulr.users/get-users$fn (REPL:15).
; class java.lang.Integer cannot be cast to class clojure.lang.Named (java.lang.Integer is in module java.base of loader 'bootstrap'; clojure.lang.Named is in unnamed module of loader 'app')
clj꞉modulr.users꞉> 
#'modulr.users/get-users
clj꞉modulr.users꞉> 
[{:id 1, :username nil, :password nil}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 1}]
clj꞉modulr.users꞉> 
[#:users{:id 1, :username nil, :password nil} #:users{:id 2, :username "test", :password "test"}]
clj꞉modulr.users꞉> 
#'modulr.routes/users
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.users/save-user
clj꞉modulr.users꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {
;     "username": "merve",
;     "password": "something"
; }
[{:id 1, :username nil, :password nil}
 {:id 2, :username "test", :password "test"}
 {:id 3, :username nil, :password nil}]
clj꞉modulr.users꞉> 
; {
;     "username": "merve",
;     "password": "something"
; }
#'modulr.users/save-user
clj꞉modulr.users꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
#'modulr.users/save-user
clj꞉modulr.users꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
{:headers {"Content-Type" "application/json"}, :body {:username "merve"}}
clj꞉modulr.util꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (FileInputStream.java:-2).
; {"username":"merve"} (No such file or directory)
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (FileInputStream.java:-2).
; {"username":"merve"} (No such file or directory)
clj꞉modulr.util꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (FileInputStream.java:-2).
; {"username":"merve"} (No such file or directory)
clj꞉modulr.util꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (FileInputStream.java:-2).
; {"username": "merve"} (No such file or directory)
clj꞉modulr.util꞉> 
; Execution error (FileNotFoundException) at java.io.FileInputStream/open0 (FileInputStream.java:-2).
; {"username": "merve"} (No such file or directory)
clj꞉modulr.util꞉> 
#'modulr.util/string->stream
clj꞉modulr.util꞉> 
{:headers {"Content-Type" "application/json"}, :body "{\"username\":\"merve\"}"}
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; #object[java.io.ByteArrayInputStream 0x73e9b76 java.io.ByteArrayInputStream@73e9b76]
{:headers {"Content-Type" "application/json"}, :body "{\"username\":\"merve\"}"}
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; {"username": "merve"}
; Execution error (MismatchedInputException) at com.fasterxml.jackson.databind.exc.MismatchedInputException/from (MismatchedInputException.java:59).
; No content to map due to end-of-input
;  at [Source: REDACTED (`StreamReadFeature.INCLUDE_SOURCE_IN_LOCATION` disabled); line: 1]
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; {"username": "merve"}
{:headers {"Content-Type" "application/json"}, :body "{\"username\":\"merve\"}"}
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
; {:username merve}
{:headers {"Content-Type" "application/json"}, :body "{\"username\":\"merve\"}"}
clj꞉modulr.util꞉> 
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.users/save-user
clj꞉modulr.users꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in user
; java.lang.String
; nil
; nil
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:55335 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in user
; java.lang.String
; nil
; nil
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:55353 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; {:password something, :username merve}
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; {:password something, :username merve}
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; {:username merve}
{:headers {"Content-Type" "application/json"}, :body "{\"username\":\"merve\"}"}
clj꞉modulr.util꞉> 
; {:password something, :username merve}
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:56086 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:56117 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
(def app (compojure.core/routes home login users (route/not-found "Page not found")))
clj꞉modulr.routes꞉> 
#'modulr.routes/instance
clj꞉modulr.routes꞉> 
; Execution error (ClassCastException) at modulr.routes/eval17242 (REPL:37).
; class clojure.lang.PersistentList cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentList and clojure.lang.IFn are in unnamed module of loader 'app')
clj꞉modulr.routes꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:57470 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
false
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
nil
clj꞉modulr.source꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:57560 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
(util/wrap-json (cookies/wrap-cookies routes/app))
clj꞉modulr.server꞉> 
(cookies/wrap-cookies (util/wrap-json routes/app))
clj꞉modulr.server꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
; in wrap-json
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; #function[clojure.core/type] {
;     "username": "merve",
;     "password": "something"
; }
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; java.lang.String
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; true
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; true
; false
; content-type: 
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 9f5a5e2c-50ed-4a01-9086-ce4bac94615b}
; in login
; in user
; {
;     "username": "merve",
;     "password": "something"
; }
; nil
; nil
#'modulr.util/get-content-type
clj꞉modulr.util꞉> 
#'modulr.util/get-content-type
clj꞉modulr.util꞉> 
#'modulr.util/decode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/encode-body-json
clj꞉modulr.util꞉> 
#'modulr.util/wrap-json
clj꞉modulr.util꞉> 
#'modulr.server/start-server
clj꞉modulr.server꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 9135a71c-e424-40ba-a4a7-02c0b6da518f}
; in login
; in user
; {:password something, :username merve}
; merve
; something
nil
clj꞉modulr.users꞉> 
#'modulr.users/get-users
clj꞉modulr.users꞉> 
[{:id 1, :username nil, :password nil}
 {:id 2, :username "test", :password "test"}
 {:id 3, :username nil, :password nil}
 {:id 4, :username nil, :password nil}
 {:id 5, :username nil, :password nil}
 {:id 6, :username nil, :password nil}
 {:id 7, :username nil, :password nil}
 {:id 8, :username nil, :password nil}
 {:id 9, :username "test", :password "test"}
 {:id 10, :username nil, :password nil}
 {:id 11, :username "test", :password "test"}
 {:id 12, :username nil, :password nil}
 {:id 13, :username nil, :password nil}
 {:id 14, :username nil, :password nil}
 {:id 15, :username nil, :password nil}
 {:id 16, :username "test", :password "test"}
 {:id 17, :username nil, :password nil}
 {:id 18, :username "test", :password "test"}
 {:id 19, :username nil, :password nil}
 {:id 20, :username nil, :password nil}
 {:id 21, :username "test", :password "test"}
 {:id 22, :username "test", :password "test"}
 {:id 23, :username nil, :password nil}
 {:id 24, :username nil, :password nil}
 {:id 25, :username nil, :password nil}
 {:id 26, :username nil, :password nil}
 {:id 27, :username nil, :password nil}
 {:id 28, :username nil, :password nil}
 {:id 29, :username nil, :password nil}
 {:id 30, :username nil, :password nil}
 {:id 31, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
[#:users{:id 1, :username nil, :password nil}
 #:users{:id 2, :username "test", :password "test"}
 #:users{:id 3, :username nil, :password nil}
 #:users{:id 4, :username nil, :password nil}
 #:users{:id 5, :username nil, :password nil}
 #:users{:id 6, :username nil, :password nil}
 #:users{:id 7, :username nil, :password nil}
 #:users{:id 8, :username nil, :password nil}
 #:users{:id 9, :username "test", :password "test"}
 #:users{:id 10, :username nil, :password nil}
 #:users{:id 11, :username "test", :password "test"}
 #:users{:id 12, :username nil, :password nil}
 #:users{:id 13, :username nil, :password nil}
 #:users{:id 14, :username nil, :password nil}
 #:users{:id 15, :username nil, :password nil}
 #:users{:id 16, :username "test", :password "test"}
 #:users{:id 17, :username nil, :password nil}
 #:users{:id 18, :username "test", :password "test"}
 #:users{:id 19, :username nil, :password nil}
 #:users{:id 20, :username nil, :password nil}
 #:users{:id 21, :username "test", :password "test"}
 #:users{:id 22, :username "test", :password "test"}
 #:users{:id 23, :username nil, :password nil}
 #:users{:id 24, :username nil, :password nil}
 #:users{:id 25, :username nil, :password nil}
 #:users{:id 26, :username nil, :password nil}
 #:users{:id 27, :username nil, :password nil}
 #:users{:id 28, :username nil, :password nil}
 #:users{:id 29, :username nil, :password nil}
 #:users{:id 30, :username nil, :password nil}
 #:users{:id 31, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
; Execution error (SQLiteException) at org.sqlite.core.DB/newSQLException (DB.java:1179).
; [SQLITE_ERROR] SQL error or missing database (no such table: USERS)
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
; in user
; {:username test, :password test}
; test
; test
[#:next.jdbc{:update-count 1}]
clj꞉modulr.users꞉> 
[{:id 1, :username "test", :password "test"}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token e9de9732-c122-486c-8ae8-ab9c5dad6635}
; in login
; in user
; {:password something, :username merve}
; merve
; something
[#:users{:id 1, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
[{:id 1, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
#'modulr.users/delete-user
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 1}]
clj꞉modulr.users꞉> 
[]
clj꞉modulr.users꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 21602f05-74c4-4658-99dc-607a84e8a7e3}
; in login
; in user
; {:password something, :username merve}
; merve
; something
[#:users{:id 2, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
[#:next.jdbc{:update-count 0}]
clj꞉modulr.users꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 770b7b81-1e40-46a3-851c-20e5645bff84}
; in login
; in user
; {:password something, :username merve}
; merve
; something
[#:users{:id 1, :username "merve", :password "something"}]
clj꞉modulr.users꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:58481 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 

clj꞉modulr.password꞉> 

clj꞉modulr.password꞉> 

clj꞉modulr.password꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:58534 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.password꞉> 
; Syntax error compiling at (src/modulr/password.clj:7:1).
; Unable to resolve symbol: hash-password in this context
clj꞉modulr.password꞉> 
; Syntax error compiling at (src/modulr/password.clj:5:16).
; No such var: hash/hash-str
clj꞉modulr.password꞉> 
nil
clj꞉modulr.password꞉> 
; Syntax error compiling at (src/modulr/password.clj:5:16).
; No such var: hash/hash-str
clj꞉modulr.password꞉> 
#'modulr.password/hash-password
clj꞉modulr.password꞉> 
; Execution error (IllegalArgumentException) at buddy.core.hash/eval9617$fn$G (hash.clj:68).
; No implementation of method: :-reset of protocol: #'buddy.core.hash/IEngine found for class: nil
clj꞉modulr.password꞉> 
#'modulr.password/hash-password
clj꞉modulr.password꞉> 
[-87, 74, -113, -27, -52, -79, -101, -90, 28, 76, 8, 115, -45, -111, -23, -121, -104, 47, -69, -45]
clj꞉modulr.password꞉> 
#'modulr.password/hash-password
clj꞉modulr.password꞉> 
[-87, 74, -113, -27, -52, -79, -101, -90, 28, 76, 8, 115, -45, -111, -23, -121, -104, 47, -69, -45]
clj꞉modulr.password꞉> 
nil
clj꞉modulr.password꞉> 
#'modulr.password/hash-password
clj꞉modulr.password꞉> 
[-87, 74, -113, -27, -52, -79, -101, -90, 28, 76, 8, 115, -45, -111, -23, -121, -104, 47, -69, -45]
clj꞉modulr.password꞉> 
#'modulr.password/hash-password
clj꞉modulr.password꞉> 
"a94a8fe5ccb19ba61c4c0873d391e987982fbbd3"
clj꞉modulr.password꞉> 
#'modulr.password/verify-password
clj꞉modulr.password꞉> 
true
clj꞉modulr.password꞉> 
; Syntax error compiling at (src/modulr/users.clj:13:90).
; No such var: modulr.password/hash-passowrd
clj꞉modulr.users꞉> 
nil
clj꞉modulr.users꞉> 
nil
clj꞉modulr.users꞉> 
; Syntax error compiling at (src/modulr/users.clj:14:90).
; No such var: pw/hash-passowrd
clj꞉modulr.users꞉> 
#'modulr.users/create-user
clj꞉modulr.users꞉> 
; Syntax error compiling at (src/modulr/routes.clj:16:5).
; No such var: users/save-user
clj꞉modulr.routes꞉> 
#'modulr.routes/login
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/routes.clj:25:1).
; Unable to resolve symbol: home in this context
clj꞉modulr.routes꞉> 
#'modulr.routes/home
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/routes.clj:25:1).
; Unable to resolve symbol: users in this context
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/routes.clj:22:20).
; No such var: users/get-users
clj꞉modulr.routes꞉> 
#'modulr.users/get-users
clj꞉modulr.users꞉> 
#'modulr.routes/users
clj꞉modulr.routes꞉> 
#'modulr.routes/app
clj꞉modulr.routes꞉> 
; Syntax error compiling at (src/modulr/server.clj:14:3).
; Unable to resolve symbol: *server in this context
clj꞉modulr.server꞉> 
nil
clj꞉modulr.server꞉> 
; nREPL Connection was closed
; Connecting using "deps.edn" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Connecting ...
; Reading port file: file:///Users/merv/Developer/source/source-be/.nrepl-port ...
; Using host:port localhost:59151 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉user꞉> 
nil
clj꞉modulr.source꞉> 
; Starting server on port 3000
#function[clojure.lang.AFunction/1]
clj꞉modulr.source꞉> 
; in wrap-json
; {:password something, :username merve}
; {host localhost:3000, user-agent PostmanRuntime/7.43.0, content-type application/json, cookie test-session=test, content-length 56, connection keep-alive, accept */*, accept-encoding gzip, deflate, br, postman-token 6432d507-0f81-45c4-93db-f0041305dd99}
; in login
; in user
; {:password something, :username merve}
; merve
; something
[#:users{:id 1, :username "merve", :password "something"}
 #:users{:id 2, :username "merve", :password "1af17e73721dbe0c40011b82ed4bb1a7dbe3ce29"}]
clj꞉modulr.users꞉> 
